import{BrowserBreadcrumbTypes as e,EventTypes as t}from"@heimdallr-sdk/types";import{replaceOld as r,generateUUID as o}from"@heimdallr-sdk/utils";var n=Object.defineProperty,l=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,a=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&a(e,r,t[r]);if(l)for(var r of l(t))s.call(t,r)&&a(e,r,t[r]);return e};function c(){const n=["log","info","warn","error","assert"];return{name:"consolePlugin",monitor(e){if(!window.console)return;const{debug:t}=this.getContext();n.forEach((o=>{r(window.console,o,(function(r){return function(...n){r&&(e({args:n,level:o}),t&&r.apply(window.console,n))}}))}))},transform(r){const n=o(),{args:l,level:i}=r;return this.breadcrumb.unshift({lid:n,bt:e.CONSOLE,msg:`Console output "${l.join(",")}" "${i}"`,t:this.getTime()}),{lid:n,t:this.getTime(),e:t.CONSOLE,dat:u({st:r.level},r)}}}}export{c as default};
