import { mockByType, transType } from './lib/transform';
import { getJsonProperty, getRandomInt, hasAnyNullOrUndefined, isArray, isObject } from './lib/utils';
var TAG = '[type-json-mapper';
export var deserialize = function (Clazz, json) {
    if (hasAnyNullOrUndefined(Clazz, json)) {
        throw new Error(TAG + "/deserialize]: missing Clazz or json");
    }
    if (!isObject(json)) {
        throw new Error(TAG + "/deserialize]: json is not a object");
    }
    var instance = new Clazz();
    var result = instance;
    for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {
        var localKey = _a[_i];
        var value = json[localKey];
        var metaObj = getJsonProperty(instance, localKey) || {};
        var _b = metaObj, type = _b.type, key = _b.key;
        if (!['', 0, undefined].includes(key)) {
            value = json[key];
            if (typeof value !== 'undefined') {
                value = transType(value, type);
            }
        }
        var filter = metaObj.filter;
        if (typeof filter === 'function') {
            var tempVal = filter(value, json);
            if (typeof tempVal !== 'undefined') {
                value = tempVal;
            }
        }
        var childClazz = metaObj.Clazz;
        if (typeof childClazz !== 'undefined') {
            if (isObject(value)) {
                value = deserialize(childClazz, value);
            }
            if (isArray(value)) {
                value = deserializeArr(childClazz, value);
            }
        }
        if (typeof value !== 'undefined') {
            result[localKey] = value;
        }
    }
    return result;
};
export var deserializeArr = function (Clazz, list) {
    if (hasAnyNullOrUndefined(Clazz, list)) {
        throw new Error(TAG + "/deserializeArr]: missing Clazz or list");
    }
    return list.map(function (ele) { return deserialize(Clazz, ele); });
};
export var serialize = function (Clazz, json) {
    if (hasAnyNullOrUndefined(Clazz, json)) {
        throw new Error(TAG + "/serialize]: missing Clazz or json");
    }
    if (!isObject(json)) {
        throw new Error(TAG + "/serialize]: json is not a object");
    }
    var result = {};
    var instance = new Clazz();
    for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {
        var localKey = _a[_i];
        var value = json[localKey];
        if (typeof value === 'undefined') {
            continue;
        }
        var metaObj = getJsonProperty(instance, localKey) || {};
        var childClazz = metaObj.Clazz;
        if (typeof childClazz !== 'undefined') {
            if (isObject(value)) {
                value = serialize(childClazz, value);
            }
            if (isArray(value)) {
                value = serializeArr(childClazz, value);
            }
        }
        var key = metaObj.key;
        result[key ? key : localKey] = value;
    }
    return result;
};
export var serializeArr = function (Clazz, list) {
    if (hasAnyNullOrUndefined(Clazz, list)) {
        throw new Error(TAG + "/serializeArr]: missing Clazz or list");
    }
    return list.map(function (ele) { return serialize(Clazz, ele); });
};
export function mock(Clazz, options) {
    if (hasAnyNullOrUndefined(Clazz)) {
        throw new Error(TAG + "/mock]: missing Clazz");
    }
    if (!options || typeof options !== 'object') {
        options = {};
    }
    var instance = new Clazz();
    var result = instance;
    var _loop_1 = function (key) {
        var _a = options.fieldLength, fieldLength = _a === void 0 ? {} : _a, _b = options.arrayFields, arrayFields = _b === void 0 ? [] : _b;
        var value = '';
        var metaObj = getJsonProperty(instance, key) || {};
        var type = metaObj.type;
        if (type) {
            var length_1 = fieldLength[key] || 6;
            value = mockByType(type, length_1);
        }
        var filter = metaObj.filter;
        if (typeof filter === 'function') {
            var tempVal = filter();
            if (typeof tempVal !== 'undefined') {
                value = tempVal;
            }
        }
        var childClazz = metaObj.Clazz;
        if (typeof childClazz !== 'undefined') {
            if (arrayFields.includes(key)) {
                value = new Array(getRandomInt(1, 18)).fill(0).map(function () { return mock(childClazz, options); });
            }
            else {
                value = mock(childClazz, options);
            }
        }
        result[key] = value;
    };
    for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {
        var key = _a[_i];
        _loop_1(key);
    }
    return result;
}
